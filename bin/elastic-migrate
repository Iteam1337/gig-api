#!/usr/bin/env node
const { writeFileSync } = require('fs')

const { Client } = require('elasticsearch')
const reqdir = require('require-dir')

const { elastic: { host } }  = require('../lib/config')

const INDEX = 'migrations'
const TYPE = 'migration'
const CWD = `${process.cwd()}`.replace(/\/bin(\/)?$/i, '')
const MIGRATIONS_DIR = `${CWD}/elastic-migrations`

async function checkIndex (client) {
  const exists = await client.indices.exists({ index: INDEX })

  if (exists) {
    return true
  }

  let ok = false

  try {
    const { acknowledged } = await client.indices.create({
      index:  INDEX,
      body: {
        settings: {
          index: { 'mapper.dynamic': false }
        },
        mappings: {
          [TYPE]: {
            dynamic: 'strict',
            properties: {
              date: { type: 'long' },
              name: { type: 'text' }
            }
          }
        }
      }
    })
    ok = acknowledged
  } catch (error) {
    console.log(error)
  }

  return ok
}

async function last (client) {
  try {
    const { hits: { hits: [ { _id: id, _source: last } ] } } = await client.search({
      index: INDEX,
      type: TYPE,
      body: {
        aggs: {
          date: {
            max: {
              field: 'date'
            }
          }
        },
        size: 1
      }
    })

    return Object.assign({ filename: id }, last)
  } catch (error) {
    return { filename: '', date:  0, name: '' }
  }
}

function saveJob ({ client, date, name, filename }) {
  return client.create({
    index: INDEX,
    type: TYPE,
    id: filename,
    body: {
      date,
      name
    }
  })
}

function removeJob ({ client, filename }) {
  return client.delete({
    index: INDEX,
    type: TYPE,
    id: filename
  })
}

async function up ({ client, migrations, lastDocument }) {
  const keys = Object
    .keys(migrations)
    .reduce((array, filename) => {
      const [ date, name ] = filename.split('_')
      if (!date || !name) {
        return array
      }
      array.push([ Number.parseInt(date, 10) || 0, name, filename ])
      return array
    }, [])
    .sort(([ aDate ], [ bDate ]) =>
      aDate > bDate ? 1 : aDate < bDate ? -1 : 0)
    .filter(([ date ]) => date > lastDocument.date)

  if (!keys.length) {
    return console.log(`
  NO MIGRATIONS
    `)
  }

  console.log(`
  MIGRATE UP
  `)

  await Promise.all(keys.map(async ([ date, name, filename ]) => {
    const dir = migrations[filename]['up']

    if (dir && typeof dir === 'function') {
      try {
        await dir(client)
      } catch (error) {
        console.error(error)
        process.exit(1)
      }
    }

    await saveJob({ client, date, name, filename })

    console.log(`\n${filename}:\n-----------\n`, dir)
  }))
}

async function down ({ client, migrations, lastDocument: { filename } }) {
  const dir = migrations[filename]['down']

  console.log(`
  MIGRATE DOWN
  `)

  if (dir && typeof dir === 'function') {
    try {
      await dir(client)
    } catch (error) {
      console.error(error)
      process.exit(1)
    }
  }

  await removeJob({ client, filename })

  console.log(`\n${filename}:\n-----------\n`, dir)
}

async function migrate (direction = 'up', paths) {
  const client = new Client({ host })

  const ok = await checkIndex(client)

  if (!ok) {
    return process.exit(1)
  }

  const lastDocument = await last(client)
  const migrations = paths
    .reduce((paths, path) =>
      Object.assign(paths, reqdir(path)), {})

  if (direction === 'up') {
    await up({
      client,
      migrations,
      lastDocument
    })
  } else if (lastDocument.date !== 0) {
    await down({
      client,
      migrations,
      lastDocument
    })
  }
}

async function create (name = '') {
  console.log(`
  CREATE MIGRATION
  `)

  if (!name) {
    return process.exit(1)
  }

  const filename = `${Date.now()}_${name}.js`
  writeFileSync(`${MIGRATIONS_DIR}/${filename}`, `exports.up = async _client => {}\n\nexports.down = async _client => {}\n`)
}

async function main () {
  const argsSlice = process.argv.slice(2).length ? process.argv.slice(2) : ['up']
  const argsString = argsSlice.join(' ').toLowerCase()
  const paths = [MIGRATIONS_DIR]

  const direction = argsString.startsWith('up')
    ? 'up'
    : argsString.startsWith('down')
      ? 'down'
      : undefined

  if (direction) {
    if (argsString.endsWith('integration')) {
      paths.push(`${CWD}/test/integration/elastic-migrations`)
    }

    await migrate(direction, paths)
  } else if (argsString.startsWith('create')) {
    await create(argsSlice[1])
  }

  process.exit(0)
}

main()
